import type { CoinInfo, BitcoinNetworkInfo, EthereumNetworkInfo, MiscNetworkInfo, DerivationPath } from '../types';
export declare const getBitcoinNetwork: (pathOrName: DerivationPath) => BitcoinNetworkInfo | undefined;
export declare const getEthereumNetwork: (pathOrName: DerivationPath) => EthereumNetworkInfo | undefined;
export declare const getMiscNetwork: (pathOrName: DerivationPath) => MiscNetworkInfo | undefined;
export declare const getSegwitNetwork: (coin: BitcoinNetworkInfo) => {
    bip32: {
        public: number;
        private: number;
    };
    messagePrefix: string;
    bech32: string;
    pubKeyHash: number;
    scriptHash: number;
    wif: number;
    forkId?: number | undefined;
} | null;
export declare const getBech32Network: (coin: BitcoinNetworkInfo) => {
    bip32: {
        public: number;
        private: number;
    };
    messagePrefix: string;
    bech32: string;
    pubKeyHash: number;
    scriptHash: number;
    wif: number;
    forkId?: number | undefined;
} | null;
export declare const fixCoinInfoNetwork: (ci: BitcoinNetworkInfo, path: number[]) => BitcoinNetworkInfo;
export declare const getCoinInfoByHash: (hash: string, networkInfo: any) => BitcoinNetworkInfo;
export declare const getCoinInfo: (currency: string) => BitcoinNetworkInfo | EthereumNetworkInfo | MiscNetworkInfo | undefined;
export declare const getCoinName: (path: number[]) => string;
export declare const ethereumNetworkInfoBase: {
    blockTime: number;
    minFee: number;
    maxFee: number;
    dustLimit: number;
    defaultFees: import("../types").FeeLevel[];
    type: "ethereum";
    decimals: number;
};
export declare const parseCoinsJson: (json: any) => void;
export declare const getUniqueNetworks: (networks: (CoinInfo | undefined)[]) => CoinInfo[];
export declare const getAllNetworks: () => (BitcoinNetworkInfo | EthereumNetworkInfo | MiscNetworkInfo)[];
//# sourceMappingURL=coinInfo.d.ts.map