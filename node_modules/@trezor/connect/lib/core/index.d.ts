/// <reference types="node" />
import EventEmitter from 'events';
import { TransportInfo, CoreMessage } from '../events';
import { AbstractMethod } from './AbstractMethod';
import { LogWriter } from '../utils/debug';
import type { ConnectSettings } from '../types';
export declare const handleMessage: (message: CoreMessage) => void;
export declare const onCall: (message: CoreMessage) => Promise<void>;
export declare class Core extends EventEmitter {
    handleMessage(message: any): void;
    dispose(): Promise<void>;
    getCurrentMethod(): Promise<AbstractMethod<any, undefined>>;
    getTransportInfo(): TransportInfo | undefined;
    enumerate(): void;
}
export declare const initCore: (settings: ConnectSettings, logWriterFactory?: () => LogWriter | undefined) => Promise<Core>;
export declare const initTransport: (settings: ConnectSettings) => Promise<void>;
//# sourceMappingURL=index.d.ts.map