import type { PROTO } from '../../../constants';
import type { DerivationPath } from '../../params';
export interface BinanceSDKTransaction {
    chain_id: string;
    account_number?: number;
    memo?: string;
    sequence?: number;
    source?: number;
    transfer?: PROTO.BinanceTransferMsg;
    placeOrder?: PROTO.BinanceOrderMsg;
    cancelOrder?: PROTO.BinanceCancelMsg;
}
export type BinancePreparedMessage = (PROTO.BinanceTransferMsg & {
    type: 'BinanceTransferMsg';
}) | (PROTO.BinanceOrderMsg & {
    type: 'BinanceOrderMsg';
}) | (PROTO.BinanceCancelMsg & {
    type: 'BinanceCancelMsg';
});
export interface BinancePreparedTransaction extends BinanceSDKTransaction {
    messages: BinancePreparedMessage[];
    account_number: number;
    sequence: number;
    source: number;
}
export interface BinanceSignTransaction {
    path: DerivationPath;
    transaction: BinanceSDKTransaction;
    chunkify?: boolean;
}
//# sourceMappingURL=index.d.ts.map