import { Deferred } from '@trezor/utils/lib/createDeferred';
import { TypedEmitter } from '@trezor/utils/lib/typedEventEmitter';
type Log = any;
export interface AbstractMessageChannelConstructorParams {
    sendFn: (message: any) => void;
    channel: {
        here: string;
        peer: string;
    };
    logger?: Log;
}
export type Message<IncomingMessages extends {
    type: string;
}> = {
    channel: AbstractMessageChannelConstructorParams['channel'];
    id: number;
    type: IncomingMessages['type'];
    payload: IncomingMessages;
    success: boolean;
};
export declare abstract class AbstractMessageChannel<IncomingMessages extends {
    type: string;
}> extends TypedEmitter<{
    message: Message<IncomingMessages>;
}> {
    protected messagePromises: Record<number, Deferred<any>>;
    protected messagesQueue: any[];
    protected messageID: number;
    abstract disconnect(): void;
    private readonly handshakeMaxRetries;
    private readonly handshakeRetryInterval;
    private handshakeFinished;
    protected logger?: Log;
    sendFn: AbstractMessageChannelConstructorParams['sendFn'];
    channel: AbstractMessageChannelConstructorParams['channel'];
    constructor({ sendFn, channel, logger }: AbstractMessageChannelConstructorParams);
    init(): Promise<void>;
    protected handshakeWithPeer(): Promise<void>;
    protected onMessage(message: Message<IncomingMessages>): void;
    postMessage(message: any, { usePromise, useQueue }?: {
        usePromise?: boolean | undefined;
        useQueue?: boolean | undefined;
    }): Promise<any> | undefined;
}
export {};
//# sourceMappingURL=abstract.d.ts.map